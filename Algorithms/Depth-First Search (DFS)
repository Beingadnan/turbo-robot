# Depth-First Search (DFS)
Depth-First Search (DFS) is an algorithm used for traversing or searching tree or graph data structures. The algorithm starts at the root (or an arbitrary node for a graph) and explores as far as possible along each branch before backtracking.

# Key Characteristics:
Data Structure: It uses a stack data structure (either implicitly through recursion or explicitly using a stack).
Traversal Order: It goes deep into a branch of the graph until it cannot go further, then backtracks and explores the next branch.

# Algorithm Explanation
1.Start at the root node (or any node in the case of a graph).
2.Mark the node as visited.
3.Explore each adjacent unvisited node recursively (or iteratively using a stack).
4.Repeat until all nodes are visited.

# Java Implementation

import java.util.*;

public class Graph {
    private final int vertices; // Number of vertices
    private final List<List<Integer>> adjacencyList; // Adjacency list

    // Constructor
    public Graph(int vertices) {
        this.vertices = vertices;
        adjacencyList = new ArrayList<>(vertices);
        for (int i = 0; i < vertices; i++) {
            adjacencyList.add(new ArrayList<>());
        }
    }

    // Add edge to the graph
    public void addEdge(int source, int destination) {
        adjacencyList.get(source).add(destination);
        adjacencyList.get(destination).add(source); // For undirected graph
    }

    // DFS Recursive method
    private void dfsRecursive(int vertex, boolean[] visited) {
        visited[vertex] = true; // Mark the current node as visited
        System.out.print(vertex + " "); // Process the current node

        // Recur for all the vertices adjacent to this vertex
        for (int adjacent : adjacencyList.get(vertex)) {
            if (!visited[adjacent]) {
                dfsRecursive(adjacent, visited);
            }
        }
    }

    // Public method to start DFS
    public void dfs(int startVertex) {
        boolean[] visited = new boolean[vertices]; // Track visited nodes
        dfsRecursive(startVertex, visited); // Start DFS from the given vertex
    }

    public static void main(String[] args) {
        Graph graph = new Graph(6); // Create a graph with 6 vertices
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);

        System.out.println("DFS starting from vertex 0:");
        graph.dfs(0); // Start DFS from vertex 0
    }
}
# Example
     0
   /   \
  1     2
 / \     \
3   4     5

# Output
DFS starting from vertex 0:
0 1 3 4 2 5 

